/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgConfigRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgConfig extends TableImpl<PgConfigRecord> {

    private static final long serialVersionUID = -1963543244;

    /**
     * The reference instance of <code>pg_catalog.pg_config</code>
     */
    public static final PgConfig PG_CONFIG = new PgConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgConfigRecord> getRecordType() {
        return PgConfigRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_config.name</code>.
     */
    public final TableField<PgConfigRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_config.setting</code>.
     */
    public final TableField<PgConfigRecord, String> SETTING = createField(DSL.name("setting"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>pg_catalog.pg_config</code> table reference
     */
    public PgConfig() {
        this(DSL.name("pg_config"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_config</code> table reference
     */
    public PgConfig(String alias) {
        this(DSL.name(alias), PG_CONFIG);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_config</code> table reference
     */
    public PgConfig(Name alias) {
        this(alias, PG_CONFIG);
    }

    private PgConfig(Name alias, Table<PgConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgConfig(Name alias, Table<PgConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgConfig(Table<O> child, ForeignKey<O, PgConfigRecord> key) {
        super(child, key, PG_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public PgConfig as(String alias) {
        return new PgConfig(DSL.name(alias), this);
    }

    @Override
    public PgConfig as(Name alias) {
        return new PgConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgConfig rename(String name) {
        return new PgConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgConfig rename(Name name) {
        return new PgConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
