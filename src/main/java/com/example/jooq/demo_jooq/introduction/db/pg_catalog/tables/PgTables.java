/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgTablesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgTables extends TableImpl<PgTablesRecord> {

    private static final long serialVersionUID = -359351368;

    /**
     * The reference instance of <code>pg_catalog.pg_tables</code>
     */
    public static final PgTables PG_TABLES = new PgTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTablesRecord> getRecordType() {
        return PgTablesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_tables.schemaname</code>.
     */
    public final TableField<PgTablesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.tablename</code>.
     */
    public final TableField<PgTablesRecord, String> TABLENAME = createField(DSL.name("tablename"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.tableowner</code>.
     */
    public final TableField<PgTablesRecord, String> TABLEOWNER = createField(DSL.name("tableowner"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.tablespace</code>.
     */
    public final TableField<PgTablesRecord, String> TABLESPACE = createField(DSL.name("tablespace"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.hasindexes</code>.
     */
    public final TableField<PgTablesRecord, Boolean> HASINDEXES = createField(DSL.name("hasindexes"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.hasrules</code>.
     */
    public final TableField<PgTablesRecord, Boolean> HASRULES = createField(DSL.name("hasrules"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.hastriggers</code>.
     */
    public final TableField<PgTablesRecord, Boolean> HASTRIGGERS = createField(DSL.name("hastriggers"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_tables.rowsecurity</code>.
     */
    public final TableField<PgTablesRecord, Boolean> ROWSECURITY = createField(DSL.name("rowsecurity"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>pg_catalog.pg_tables</code> table reference
     */
    public PgTables() {
        this(DSL.name("pg_tables"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_tables</code> table reference
     */
    public PgTables(String alias) {
        this(DSL.name(alias), PG_TABLES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_tables</code> table reference
     */
    public PgTables(Name alias) {
        this(alias, PG_TABLES);
    }

    private PgTables(Name alias, Table<PgTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgTables(Name alias, Table<PgTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgTables(Table<O> child, ForeignKey<O, PgTablesRecord> key) {
        super(child, key, PG_TABLES);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public PgTables as(String alias) {
        return new PgTables(DSL.name(alias), this);
    }

    @Override
    public PgTables as(Name alias) {
        return new PgTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTables rename(String name) {
        return new PgTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTables rename(Name name) {
        return new PgTables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
