/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgShowAllFileSettingsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgShowAllFileSettings extends TableImpl<PgShowAllFileSettingsRecord> {

    private static final long serialVersionUID = -265780754;

    /**
     * The reference instance of <code>pg_catalog.pg_show_all_file_settings</code>
     */
    public static final PgShowAllFileSettings PG_SHOW_ALL_FILE_SETTINGS = new PgShowAllFileSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgShowAllFileSettingsRecord> getRecordType() {
        return PgShowAllFileSettingsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.sourcefile</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> SOURCEFILE = createField(DSL.name("sourcefile"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.sourceline</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, Integer> SOURCELINE = createField(DSL.name("sourceline"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.seqno</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, Integer> SEQNO = createField(DSL.name("seqno"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.name</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.setting</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> SETTING = createField(DSL.name("setting"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.applied</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, Boolean> APPLIED = createField(DSL.name("applied"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.error</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> ERROR = createField(DSL.name("error"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>pg_catalog.pg_show_all_file_settings</code> table reference
     */
    public PgShowAllFileSettings() {
        this(DSL.name("pg_show_all_file_settings"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_file_settings</code> table reference
     */
    public PgShowAllFileSettings(String alias) {
        this(DSL.name(alias), PG_SHOW_ALL_FILE_SETTINGS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_file_settings</code> table reference
     */
    public PgShowAllFileSettings(Name alias) {
        this(alias, PG_SHOW_ALL_FILE_SETTINGS);
    }

    private PgShowAllFileSettings(Name alias, Table<PgShowAllFileSettingsRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private PgShowAllFileSettings(Name alias, Table<PgShowAllFileSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgShowAllFileSettings(Table<O> child, ForeignKey<O, PgShowAllFileSettingsRecord> key) {
        super(child, key, PG_SHOW_ALL_FILE_SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public PgShowAllFileSettings as(String alias) {
        return new PgShowAllFileSettings(DSL.name(alias), this, parameters);
    }

    @Override
    public PgShowAllFileSettings as(Name alias) {
        return new PgShowAllFileSettings(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllFileSettings rename(String name) {
        return new PgShowAllFileSettings(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllFileSettings rename(Name name) {
        return new PgShowAllFileSettings(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, Integer, String, String, Boolean, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PgShowAllFileSettings call() {
        return new PgShowAllFileSettings(DSL.name(getName()), null, new Field[] { 
        });
    }
}
