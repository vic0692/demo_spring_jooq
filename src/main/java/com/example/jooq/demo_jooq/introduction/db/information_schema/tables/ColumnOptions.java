/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.information_schema.tables;


import com.example.jooq.demo_jooq.introduction.db.information_schema.InformationSchema;
import com.example.jooq.demo_jooq.introduction.db.information_schema.tables.records.ColumnOptionsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnOptions extends TableImpl<ColumnOptionsRecord> {

    private static final long serialVersionUID = 99176056;

    /**
     * The reference instance of <code>information_schema.column_options</code>
     */
    public static final ColumnOptions COLUMN_OPTIONS = new ColumnOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnOptionsRecord> getRecordType() {
        return ColumnOptionsRecord.class;
    }

    /**
     * The column <code>information_schema.column_options.table_catalog</code>.
     */
    public final TableField<ColumnOptionsRecord, String> TABLE_CATALOG = createField(DSL.name("table_catalog"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.column_options.table_schema</code>.
     */
    public final TableField<ColumnOptionsRecord, String> TABLE_SCHEMA = createField(DSL.name("table_schema"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.column_options.table_name</code>.
     */
    public final TableField<ColumnOptionsRecord, String> TABLE_NAME = createField(DSL.name("table_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.column_options.column_name</code>.
     */
    public final TableField<ColumnOptionsRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.column_options.option_name</code>.
     */
    public final TableField<ColumnOptionsRecord, String> OPTION_NAME = createField(DSL.name("option_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.column_options.option_value</code>.
     */
    public final TableField<ColumnOptionsRecord, String> OPTION_VALUE = createField(DSL.name("option_value"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.column_options</code> table reference
     */
    public ColumnOptions() {
        this(DSL.name("column_options"), null);
    }

    /**
     * Create an aliased <code>information_schema.column_options</code> table reference
     */
    public ColumnOptions(String alias) {
        this(DSL.name(alias), COLUMN_OPTIONS);
    }

    /**
     * Create an aliased <code>information_schema.column_options</code> table reference
     */
    public ColumnOptions(Name alias) {
        this(alias, COLUMN_OPTIONS);
    }

    private ColumnOptions(Name alias, Table<ColumnOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ColumnOptions(Name alias, Table<ColumnOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ColumnOptions(Table<O> child, ForeignKey<O, ColumnOptionsRecord> key) {
        super(child, key, COLUMN_OPTIONS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ColumnOptions as(String alias) {
        return new ColumnOptions(DSL.name(alias), this);
    }

    @Override
    public ColumnOptions as(Name alias) {
        return new ColumnOptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnOptions rename(String name) {
        return new ColumnOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnOptions rename(Name name) {
        return new ColumnOptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
