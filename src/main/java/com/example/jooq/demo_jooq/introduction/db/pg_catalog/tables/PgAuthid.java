/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.Indexes;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgAuthidRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgAuthid extends TableImpl<PgAuthidRecord> {

    private static final long serialVersionUID = -1011386861;

    /**
     * The reference instance of <code>pg_catalog.pg_authid</code>
     */
    public static final PgAuthid PG_AUTHID = new PgAuthid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgAuthidRecord> getRecordType() {
        return PgAuthidRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_authid.rolname</code>.
     */
    public final TableField<PgAuthidRecord, String> ROLNAME = createField(DSL.name("rolname"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolsuper</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLSUPER = createField(DSL.name("rolsuper"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolinherit</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLINHERIT = createField(DSL.name("rolinherit"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolcreaterole</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLCREATEROLE = createField(DSL.name("rolcreaterole"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolcreatedb</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLCREATEDB = createField(DSL.name("rolcreatedb"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolcanlogin</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLCANLOGIN = createField(DSL.name("rolcanlogin"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolreplication</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLREPLICATION = createField(DSL.name("rolreplication"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolbypassrls</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLBYPASSRLS = createField(DSL.name("rolbypassrls"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolconnlimit</code>.
     */
    public final TableField<PgAuthidRecord, Integer> ROLCONNLIMIT = createField(DSL.name("rolconnlimit"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolpassword</code>.
     */
    public final TableField<PgAuthidRecord, String> ROLPASSWORD = createField(DSL.name("rolpassword"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_authid.rolvaliduntil</code>.
     */
    public final TableField<PgAuthidRecord, OffsetDateTime> ROLVALIDUNTIL = createField(DSL.name("rolvaliduntil"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>pg_catalog.pg_authid</code> table reference
     */
    public PgAuthid() {
        this(DSL.name("pg_authid"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_authid</code> table reference
     */
    public PgAuthid(String alias) {
        this(DSL.name(alias), PG_AUTHID);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_authid</code> table reference
     */
    public PgAuthid(Name alias) {
        this(alias, PG_AUTHID);
    }

    private PgAuthid(Name alias, Table<PgAuthidRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgAuthid(Name alias, Table<PgAuthidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgAuthid(Table<O> child, ForeignKey<O, PgAuthidRecord> key) {
        super(child, key, PG_AUTHID);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_AUTHID_ROLNAME_INDEX);
    }

    @Override
    public PgAuthid as(String alias) {
        return new PgAuthid(DSL.name(alias), this);
    }

    @Override
    public PgAuthid as(Name alias) {
        return new PgAuthid(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAuthid rename(String name) {
        return new PgAuthid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAuthid rename(Name name) {
        return new PgAuthid(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Integer, String, OffsetDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
