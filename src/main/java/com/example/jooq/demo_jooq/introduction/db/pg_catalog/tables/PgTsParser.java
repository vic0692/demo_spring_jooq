/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.Indexes;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgTsParserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgTsParser extends TableImpl<PgTsParserRecord> {

    private static final long serialVersionUID = 1311161394;

    /**
     * The reference instance of <code>pg_catalog.pg_ts_parser</code>
     */
    public static final PgTsParser PG_TS_PARSER = new PgTsParser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTsParserRecord> getRecordType() {
        return PgTsParserRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ts_parser.prsname</code>.
     */
    public final TableField<PgTsParserRecord, String> PRSNAME = createField(DSL.name("prsname"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_parser.prsnamespace</code>.
     */
    public final TableField<PgTsParserRecord, Long> PRSNAMESPACE = createField(DSL.name("prsnamespace"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_parser.prsstart</code>.
     */
    public final TableField<PgTsParserRecord, String> PRSSTART = createField(DSL.name("prsstart"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_parser.prstoken</code>.
     */
    public final TableField<PgTsParserRecord, String> PRSTOKEN = createField(DSL.name("prstoken"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_parser.prsend</code>.
     */
    public final TableField<PgTsParserRecord, String> PRSEND = createField(DSL.name("prsend"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_parser.prsheadline</code>.
     */
    public final TableField<PgTsParserRecord, String> PRSHEADLINE = createField(DSL.name("prsheadline"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_parser.prslextype</code>.
     */
    public final TableField<PgTsParserRecord, String> PRSLEXTYPE = createField(DSL.name("prslextype"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>pg_catalog.pg_ts_parser</code> table reference
     */
    public PgTsParser() {
        this(DSL.name("pg_ts_parser"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_parser</code> table reference
     */
    public PgTsParser(String alias) {
        this(DSL.name(alias), PG_TS_PARSER);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_parser</code> table reference
     */
    public PgTsParser(Name alias) {
        this(alias, PG_TS_PARSER);
    }

    private PgTsParser(Name alias, Table<PgTsParserRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgTsParser(Name alias, Table<PgTsParserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgTsParser(Table<O> child, ForeignKey<O, PgTsParserRecord> key) {
        super(child, key, PG_TS_PARSER);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_TS_PARSER_PRSNAME_INDEX);
    }

    @Override
    public PgTsParser as(String alias) {
        return new PgTsParser(DSL.name(alias), this);
    }

    @Override
    public PgTsParser as(Name alias) {
        return new PgTsParser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsParser rename(String name) {
        return new PgTsParser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsParser rename(Name name) {
        return new PgTsParser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Long, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
