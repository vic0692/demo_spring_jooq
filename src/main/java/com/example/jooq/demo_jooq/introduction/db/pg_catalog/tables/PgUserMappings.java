/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgUserMappingsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgUserMappings extends TableImpl<PgUserMappingsRecord> {

    private static final long serialVersionUID = 522938713;

    /**
     * The reference instance of <code>pg_catalog.pg_user_mappings</code>
     */
    public static final PgUserMappings PG_USER_MAPPINGS = new PgUserMappings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgUserMappingsRecord> getRecordType() {
        return PgUserMappingsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_user_mappings.umid</code>.
     */
    public final TableField<PgUserMappingsRecord, Long> UMID = createField(DSL.name("umid"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_user_mappings.srvid</code>.
     */
    public final TableField<PgUserMappingsRecord, Long> SRVID = createField(DSL.name("srvid"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_user_mappings.srvname</code>.
     */
    public final TableField<PgUserMappingsRecord, String> SRVNAME = createField(DSL.name("srvname"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_user_mappings.umuser</code>.
     */
    public final TableField<PgUserMappingsRecord, Long> UMUSER = createField(DSL.name("umuser"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_user_mappings.usename</code>.
     */
    public final TableField<PgUserMappingsRecord, String> USENAME = createField(DSL.name("usename"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_user_mappings.umoptions</code>.
     */
    public final TableField<PgUserMappingsRecord, String[]> UMOPTIONS = createField(DSL.name("umoptions"), org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>pg_catalog.pg_user_mappings</code> table reference
     */
    public PgUserMappings() {
        this(DSL.name("pg_user_mappings"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_user_mappings</code> table reference
     */
    public PgUserMappings(String alias) {
        this(DSL.name(alias), PG_USER_MAPPINGS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_user_mappings</code> table reference
     */
    public PgUserMappings(Name alias) {
        this(alias, PG_USER_MAPPINGS);
    }

    private PgUserMappings(Name alias, Table<PgUserMappingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgUserMappings(Name alias, Table<PgUserMappingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgUserMappings(Table<O> child, ForeignKey<O, PgUserMappingsRecord> key) {
        super(child, key, PG_USER_MAPPINGS);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public PgUserMappings as(String alias) {
        return new PgUserMappings(DSL.name(alias), this);
    }

    @Override
    public PgUserMappings as(Name alias) {
        return new PgUserMappings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgUserMappings rename(String name) {
        return new PgUserMappings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgUserMappings rename(Name name) {
        return new PgUserMappings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Long, String, String[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
