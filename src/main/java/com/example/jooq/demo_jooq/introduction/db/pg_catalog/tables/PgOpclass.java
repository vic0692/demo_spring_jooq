/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.Indexes;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgOpclassRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgOpclass extends TableImpl<PgOpclassRecord> {

    private static final long serialVersionUID = 862242982;

    /**
     * The reference instance of <code>pg_catalog.pg_opclass</code>
     */
    public static final PgOpclass PG_OPCLASS = new PgOpclass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgOpclassRecord> getRecordType() {
        return PgOpclassRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_opclass.opcmethod</code>.
     */
    public final TableField<PgOpclassRecord, Long> OPCMETHOD = createField(DSL.name("opcmethod"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opcname</code>.
     */
    public final TableField<PgOpclassRecord, String> OPCNAME = createField(DSL.name("opcname"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opcnamespace</code>.
     */
    public final TableField<PgOpclassRecord, Long> OPCNAMESPACE = createField(DSL.name("opcnamespace"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opcowner</code>.
     */
    public final TableField<PgOpclassRecord, Long> OPCOWNER = createField(DSL.name("opcowner"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opcfamily</code>.
     */
    public final TableField<PgOpclassRecord, Long> OPCFAMILY = createField(DSL.name("opcfamily"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opcintype</code>.
     */
    public final TableField<PgOpclassRecord, Long> OPCINTYPE = createField(DSL.name("opcintype"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opcdefault</code>.
     */
    public final TableField<PgOpclassRecord, Boolean> OPCDEFAULT = createField(DSL.name("opcdefault"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_opclass.opckeytype</code>.
     */
    public final TableField<PgOpclassRecord, Long> OPCKEYTYPE = createField(DSL.name("opckeytype"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>pg_catalog.pg_opclass</code> table reference
     */
    public PgOpclass() {
        this(DSL.name("pg_opclass"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_opclass</code> table reference
     */
    public PgOpclass(String alias) {
        this(DSL.name(alias), PG_OPCLASS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_opclass</code> table reference
     */
    public PgOpclass(Name alias) {
        this(alias, PG_OPCLASS);
    }

    private PgOpclass(Name alias, Table<PgOpclassRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgOpclass(Name alias, Table<PgOpclassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgOpclass(Table<O> child, ForeignKey<O, PgOpclassRecord> key) {
        super(child, key, PG_OPCLASS);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_OPCLASS_AM_NAME_NSP_INDEX);
    }

    @Override
    public PgOpclass as(String alias) {
        return new PgOpclass(DSL.name(alias), this);
    }

    @Override
    public PgOpclass as(Name alias) {
        return new PgOpclass(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgOpclass rename(String name) {
        return new PgOpclass(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgOpclass rename(Name name) {
        return new PgOpclass(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Long, Long, Long, Long, Boolean, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
