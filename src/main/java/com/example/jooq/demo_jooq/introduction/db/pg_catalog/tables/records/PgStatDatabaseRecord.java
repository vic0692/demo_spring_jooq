/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.PgStatDatabase;

import java.time.OffsetDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record19;
import org.jooq.Row19;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatDatabaseRecord extends TableRecordImpl<PgStatDatabaseRecord> implements Record19<Long, String, Integer, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Double, Double, OffsetDateTime> {

    private static final long serialVersionUID = -144314101;

    /**
     * Setter for <code>pg_catalog.pg_stat_database.datid</code>.
     */
    public void setDatid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.datid</code>.
     */
    public Long getDatid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.datname</code>.
     */
    public void setDatname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.datname</code>.
     */
    public String getDatname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.numbackends</code>.
     */
    public void setNumbackends(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.numbackends</code>.
     */
    public Integer getNumbackends() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.xact_commit</code>.
     */
    public void setXactCommit(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.xact_commit</code>.
     */
    public Long getXactCommit() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.xact_rollback</code>.
     */
    public void setXactRollback(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.xact_rollback</code>.
     */
    public Long getXactRollback() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.blks_read</code>.
     */
    public void setBlksRead(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.blks_read</code>.
     */
    public Long getBlksRead() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.blks_hit</code>.
     */
    public void setBlksHit(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.blks_hit</code>.
     */
    public Long getBlksHit() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.tup_returned</code>.
     */
    public void setTupReturned(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.tup_returned</code>.
     */
    public Long getTupReturned() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.tup_fetched</code>.
     */
    public void setTupFetched(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.tup_fetched</code>.
     */
    public Long getTupFetched() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.tup_inserted</code>.
     */
    public void setTupInserted(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.tup_inserted</code>.
     */
    public Long getTupInserted() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.tup_updated</code>.
     */
    public void setTupUpdated(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.tup_updated</code>.
     */
    public Long getTupUpdated() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.tup_deleted</code>.
     */
    public void setTupDeleted(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.tup_deleted</code>.
     */
    public Long getTupDeleted() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.conflicts</code>.
     */
    public void setConflicts(Long value) {
        set(12, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.conflicts</code>.
     */
    public Long getConflicts() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.temp_files</code>.
     */
    public void setTempFiles(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.temp_files</code>.
     */
    public Long getTempFiles() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.temp_bytes</code>.
     */
    public void setTempBytes(Long value) {
        set(14, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.temp_bytes</code>.
     */
    public Long getTempBytes() {
        return (Long) get(14);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.deadlocks</code>.
     */
    public void setDeadlocks(Long value) {
        set(15, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.deadlocks</code>.
     */
    public Long getDeadlocks() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.blk_read_time</code>.
     */
    public void setBlkReadTime(Double value) {
        set(16, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.blk_read_time</code>.
     */
    public Double getBlkReadTime() {
        return (Double) get(16);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.blk_write_time</code>.
     */
    public void setBlkWriteTime(Double value) {
        set(17, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.blk_write_time</code>.
     */
    public Double getBlkWriteTime() {
        return (Double) get(17);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_database.stats_reset</code>.
     */
    public void setStatsReset(OffsetDateTime value) {
        set(18, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_database.stats_reset</code>.
     */
    public OffsetDateTime getStatsReset() {
        return (OffsetDateTime) get(18);
    }

    // -------------------------------------------------------------------------
    // Record19 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, Integer, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Double, Double, OffsetDateTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    @Override
    public Row19<Long, String, Integer, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Double, Double, OffsetDateTime> valuesRow() {
        return (Row19) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PgStatDatabase.PG_STAT_DATABASE.DATID;
    }

    @Override
    public Field<String> field2() {
        return PgStatDatabase.PG_STAT_DATABASE.DATNAME;
    }

    @Override
    public Field<Integer> field3() {
        return PgStatDatabase.PG_STAT_DATABASE.NUMBACKENDS;
    }

    @Override
    public Field<Long> field4() {
        return PgStatDatabase.PG_STAT_DATABASE.XACT_COMMIT;
    }

    @Override
    public Field<Long> field5() {
        return PgStatDatabase.PG_STAT_DATABASE.XACT_ROLLBACK;
    }

    @Override
    public Field<Long> field6() {
        return PgStatDatabase.PG_STAT_DATABASE.BLKS_READ;
    }

    @Override
    public Field<Long> field7() {
        return PgStatDatabase.PG_STAT_DATABASE.BLKS_HIT;
    }

    @Override
    public Field<Long> field8() {
        return PgStatDatabase.PG_STAT_DATABASE.TUP_RETURNED;
    }

    @Override
    public Field<Long> field9() {
        return PgStatDatabase.PG_STAT_DATABASE.TUP_FETCHED;
    }

    @Override
    public Field<Long> field10() {
        return PgStatDatabase.PG_STAT_DATABASE.TUP_INSERTED;
    }

    @Override
    public Field<Long> field11() {
        return PgStatDatabase.PG_STAT_DATABASE.TUP_UPDATED;
    }

    @Override
    public Field<Long> field12() {
        return PgStatDatabase.PG_STAT_DATABASE.TUP_DELETED;
    }

    @Override
    public Field<Long> field13() {
        return PgStatDatabase.PG_STAT_DATABASE.CONFLICTS;
    }

    @Override
    public Field<Long> field14() {
        return PgStatDatabase.PG_STAT_DATABASE.TEMP_FILES;
    }

    @Override
    public Field<Long> field15() {
        return PgStatDatabase.PG_STAT_DATABASE.TEMP_BYTES;
    }

    @Override
    public Field<Long> field16() {
        return PgStatDatabase.PG_STAT_DATABASE.DEADLOCKS;
    }

    @Override
    public Field<Double> field17() {
        return PgStatDatabase.PG_STAT_DATABASE.BLK_READ_TIME;
    }

    @Override
    public Field<Double> field18() {
        return PgStatDatabase.PG_STAT_DATABASE.BLK_WRITE_TIME;
    }

    @Override
    public Field<OffsetDateTime> field19() {
        return PgStatDatabase.PG_STAT_DATABASE.STATS_RESET;
    }

    @Override
    public Long component1() {
        return getDatid();
    }

    @Override
    public String component2() {
        return getDatname();
    }

    @Override
    public Integer component3() {
        return getNumbackends();
    }

    @Override
    public Long component4() {
        return getXactCommit();
    }

    @Override
    public Long component5() {
        return getXactRollback();
    }

    @Override
    public Long component6() {
        return getBlksRead();
    }

    @Override
    public Long component7() {
        return getBlksHit();
    }

    @Override
    public Long component8() {
        return getTupReturned();
    }

    @Override
    public Long component9() {
        return getTupFetched();
    }

    @Override
    public Long component10() {
        return getTupInserted();
    }

    @Override
    public Long component11() {
        return getTupUpdated();
    }

    @Override
    public Long component12() {
        return getTupDeleted();
    }

    @Override
    public Long component13() {
        return getConflicts();
    }

    @Override
    public Long component14() {
        return getTempFiles();
    }

    @Override
    public Long component15() {
        return getTempBytes();
    }

    @Override
    public Long component16() {
        return getDeadlocks();
    }

    @Override
    public Double component17() {
        return getBlkReadTime();
    }

    @Override
    public Double component18() {
        return getBlkWriteTime();
    }

    @Override
    public OffsetDateTime component19() {
        return getStatsReset();
    }

    @Override
    public Long value1() {
        return getDatid();
    }

    @Override
    public String value2() {
        return getDatname();
    }

    @Override
    public Integer value3() {
        return getNumbackends();
    }

    @Override
    public Long value4() {
        return getXactCommit();
    }

    @Override
    public Long value5() {
        return getXactRollback();
    }

    @Override
    public Long value6() {
        return getBlksRead();
    }

    @Override
    public Long value7() {
        return getBlksHit();
    }

    @Override
    public Long value8() {
        return getTupReturned();
    }

    @Override
    public Long value9() {
        return getTupFetched();
    }

    @Override
    public Long value10() {
        return getTupInserted();
    }

    @Override
    public Long value11() {
        return getTupUpdated();
    }

    @Override
    public Long value12() {
        return getTupDeleted();
    }

    @Override
    public Long value13() {
        return getConflicts();
    }

    @Override
    public Long value14() {
        return getTempFiles();
    }

    @Override
    public Long value15() {
        return getTempBytes();
    }

    @Override
    public Long value16() {
        return getDeadlocks();
    }

    @Override
    public Double value17() {
        return getBlkReadTime();
    }

    @Override
    public Double value18() {
        return getBlkWriteTime();
    }

    @Override
    public OffsetDateTime value19() {
        return getStatsReset();
    }

    @Override
    public PgStatDatabaseRecord value1(Long value) {
        setDatid(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value2(String value) {
        setDatname(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value3(Integer value) {
        setNumbackends(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value4(Long value) {
        setXactCommit(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value5(Long value) {
        setXactRollback(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value6(Long value) {
        setBlksRead(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value7(Long value) {
        setBlksHit(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value8(Long value) {
        setTupReturned(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value9(Long value) {
        setTupFetched(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value10(Long value) {
        setTupInserted(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value11(Long value) {
        setTupUpdated(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value12(Long value) {
        setTupDeleted(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value13(Long value) {
        setConflicts(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value14(Long value) {
        setTempFiles(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value15(Long value) {
        setTempBytes(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value16(Long value) {
        setDeadlocks(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value17(Double value) {
        setBlkReadTime(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value18(Double value) {
        setBlkWriteTime(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord value19(OffsetDateTime value) {
        setStatsReset(value);
        return this;
    }

    @Override
    public PgStatDatabaseRecord values(Long value1, String value2, Integer value3, Long value4, Long value5, Long value6, Long value7, Long value8, Long value9, Long value10, Long value11, Long value12, Long value13, Long value14, Long value15, Long value16, Double value17, Double value18, OffsetDateTime value19) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgStatDatabaseRecord
     */
    public PgStatDatabaseRecord() {
        super(PgStatDatabase.PG_STAT_DATABASE);
    }

    /**
     * Create a detached, initialised PgStatDatabaseRecord
     */
    public PgStatDatabaseRecord(Long datid, String datname, Integer numbackends, Long xactCommit, Long xactRollback, Long blksRead, Long blksHit, Long tupReturned, Long tupFetched, Long tupInserted, Long tupUpdated, Long tupDeleted, Long conflicts, Long tempFiles, Long tempBytes, Long deadlocks, Double blkReadTime, Double blkWriteTime, OffsetDateTime statsReset) {
        super(PgStatDatabase.PG_STAT_DATABASE);

        set(0, datid);
        set(1, datname);
        set(2, numbackends);
        set(3, xactCommit);
        set(4, xactRollback);
        set(5, blksRead);
        set(6, blksHit);
        set(7, tupReturned);
        set(8, tupFetched);
        set(9, tupInserted);
        set(10, tupUpdated);
        set(11, tupDeleted);
        set(12, conflicts);
        set(13, tempFiles);
        set(14, tempBytes);
        set(15, deadlocks);
        set(16, blkReadTime);
        set(17, blkWriteTime);
        set(18, statsReset);
    }
}
