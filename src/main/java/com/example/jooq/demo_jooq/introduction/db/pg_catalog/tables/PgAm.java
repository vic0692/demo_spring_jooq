/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.Indexes;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.PgAmRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgAm extends TableImpl<PgAmRecord> {

    private static final long serialVersionUID = -279592070;

    /**
     * The reference instance of <code>pg_catalog.pg_am</code>
     */
    public static final PgAm PG_AM = new PgAm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgAmRecord> getRecordType() {
        return PgAmRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_am.amname</code>.
     */
    public final TableField<PgAmRecord, String> AMNAME = createField(DSL.name("amname"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amhandler</code>.
     */
    public final TableField<PgAmRecord, String> AMHANDLER = createField(DSL.name("amhandler"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amtype</code>.
     */
    public final TableField<PgAmRecord, String> AMTYPE = createField(DSL.name("amtype"), org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

    /**
     * Create a <code>pg_catalog.pg_am</code> table reference
     */
    public PgAm() {
        this(DSL.name("pg_am"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_am</code> table reference
     */
    public PgAm(String alias) {
        this(DSL.name(alias), PG_AM);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_am</code> table reference
     */
    public PgAm(Name alias) {
        this(alias, PG_AM);
    }

    private PgAm(Name alias, Table<PgAmRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgAm(Name alias, Table<PgAmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgAm(Table<O> child, ForeignKey<O, PgAmRecord> key) {
        super(child, key, PG_AM);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_AM_NAME_INDEX);
    }

    @Override
    public PgAm as(String alias) {
        return new PgAm(DSL.name(alias), this);
    }

    @Override
    public PgAm as(Name alias) {
        return new PgAm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAm rename(String name) {
        return new PgAm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAm rename(Name name) {
        return new PgAm(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
