/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables;


import com.example.jooq.demo_jooq.introduction.db.pg_catalog.PgCatalog;
import com.example.jooq.demo_jooq.introduction.db.pg_catalog.tables.records.TsDebugRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TsDebug extends TableImpl<TsDebugRecord> {

    private static final long serialVersionUID = 748506585;

    /**
     * The reference instance of <code>pg_catalog.ts_debug</code>
     */
    public static final TsDebug TS_DEBUG = new TsDebug();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TsDebugRecord> getRecordType() {
        return TsDebugRecord.class;
    }

    /**
     * The column <code>pg_catalog.ts_debug.alias</code>.
     */
    public final TableField<TsDebugRecord, String> ALIAS = createField(DSL.name("alias"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.ts_debug.alias</code>.
     */
    public final TableField<TsDebugRecord, String> ALIAS = createField(DSL.name("alias"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.ts_debug.description</code>.
     */
    public final TableField<TsDebugRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.ts_debug.description</code>.
     */
    public final TableField<TsDebugRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.ts_debug.token</code>.
     */
    public final TableField<TsDebugRecord, String> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.ts_debug.token</code>.
     */
    public final TableField<TsDebugRecord, String> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.ts_debug.dictionaries</code>.
     */
    public final TableField<TsDebugRecord, Object[]> DICTIONARIES = createField(DSL.name("dictionaries"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regdictionary\"").getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.ts_debug.dictionaries</code>.
     */
    public final TableField<TsDebugRecord, Object[]> DICTIONARIES = createField(DSL.name("dictionaries"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regdictionary\"").getArrayDataType(), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<TsDebugRecord, Object> DICTIONARY = createField(DSL.name("dictionary"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regdictionary\""), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<TsDebugRecord, Object> DICTIONARY = createField(DSL.name("dictionary"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regdictionary\""), this, "");

    /**
     * The column <code>pg_catalog.ts_debug.lexemes</code>.
     */
    public final TableField<TsDebugRecord, String[]> LEXEMES = createField(DSL.name("lexemes"), org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.ts_debug.lexemes</code>.
     */
    public final TableField<TsDebugRecord, String[]> LEXEMES = createField(DSL.name("lexemes"), org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>pg_catalog.ts_debug</code> table reference
     */
    public TsDebug() {
        this(DSL.name("ts_debug"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.ts_debug</code> table reference
     */
    public TsDebug(String alias) {
        this(DSL.name(alias), TS_DEBUG);
    }

    /**
     * Create an aliased <code>pg_catalog.ts_debug</code> table reference
     */
    public TsDebug(Name alias) {
        this(alias, TS_DEBUG);
    }

    private TsDebug(Name alias, Table<TsDebugRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private TsDebug(Name alias, Table<TsDebugRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TsDebug(Table<O> child, ForeignKey<O, TsDebugRecord> key) {
        super(child, key, TS_DEBUG);
    }

    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    @Override
    public TsDebug as(String alias) {
        return new TsDebug(DSL.name(alias), this, parameters);
    }

    @Override
    public TsDebug as(Name alias) {
        return new TsDebug(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public TsDebug rename(String name) {
        return new TsDebug(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public TsDebug rename(Name name) {
        return new TsDebug(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, String, Object[], Object[], Object, Object, String[], String[]> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public TsDebug call(Object config, String document) {
        return new TsDebug(DSL.name(getName()), null, new Field[] { 
              DSL.val(config, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regconfig\""))
            , DSL.val(document, org.jooq.impl.SQLDataType.CLOB)
        });
    }

    /**
     * Call this table-valued function
     */
    public TsDebug call(Field<Object> config, Field<String> document) {
        return new TsDebug(DSL.name(getName()), null, new Field[] { 
              config
            , document
        });
    }
}
