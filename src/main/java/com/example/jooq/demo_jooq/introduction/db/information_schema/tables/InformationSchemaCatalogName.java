/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.demo_jooq.introduction.db.information_schema.tables;


import com.example.jooq.demo_jooq.introduction.db.information_schema.InformationSchema;
import com.example.jooq.demo_jooq.introduction.db.information_schema.tables.records.InformationSchemaCatalogNameRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InformationSchemaCatalogName extends TableImpl<InformationSchemaCatalogNameRecord> {

    private static final long serialVersionUID = -365553861;

    /**
     * The reference instance of <code>information_schema.information_schema_catalog_name</code>
     */
    public static final InformationSchemaCatalogName INFORMATION_SCHEMA_CATALOG_NAME = new InformationSchemaCatalogName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InformationSchemaCatalogNameRecord> getRecordType() {
        return InformationSchemaCatalogNameRecord.class;
    }

    /**
     * The column <code>information_schema.information_schema_catalog_name.catalog_name</code>.
     */
    public final TableField<InformationSchemaCatalogNameRecord, String> CATALOG_NAME = createField(DSL.name("catalog_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.information_schema_catalog_name</code> table reference
     */
    public InformationSchemaCatalogName() {
        this(DSL.name("information_schema_catalog_name"), null);
    }

    /**
     * Create an aliased <code>information_schema.information_schema_catalog_name</code> table reference
     */
    public InformationSchemaCatalogName(String alias) {
        this(DSL.name(alias), INFORMATION_SCHEMA_CATALOG_NAME);
    }

    /**
     * Create an aliased <code>information_schema.information_schema_catalog_name</code> table reference
     */
    public InformationSchemaCatalogName(Name alias) {
        this(alias, INFORMATION_SCHEMA_CATALOG_NAME);
    }

    private InformationSchemaCatalogName(Name alias, Table<InformationSchemaCatalogNameRecord> aliased) {
        this(alias, aliased, null);
    }

    private InformationSchemaCatalogName(Name alias, Table<InformationSchemaCatalogNameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InformationSchemaCatalogName(Table<O> child, ForeignKey<O, InformationSchemaCatalogNameRecord> key) {
        super(child, key, INFORMATION_SCHEMA_CATALOG_NAME);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InformationSchemaCatalogName as(String alias) {
        return new InformationSchemaCatalogName(DSL.name(alias), this);
    }

    @Override
    public InformationSchemaCatalogName as(Name alias) {
        return new InformationSchemaCatalogName(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InformationSchemaCatalogName rename(String name) {
        return new InformationSchemaCatalogName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InformationSchemaCatalogName rename(Name name) {
        return new InformationSchemaCatalogName(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
